RMON-MIB-A


DEFINITIONS ::= BEGIN

    IMPORTS
        TimeTicks              FROM RFC1155-SMI
        Counter                FROM RFC1155-SMI
        DisplayString          FROM RFC1213-MIB
        mib-2                  FROM RFC1213-MIB
        OBJECT-TYPE            FROM RFC-1212
        TRAP-TYPE              FROM RFC-1215;

--  Remote Network Monitoring MIB

    rmon    OBJECT IDENTIFIER ::= { mib-2 16 }


    -- textual conventions

    OwnerString ::= DisplayString
    -- This data type is used to model an administratively
    -- assigned name of the owner of a resource. This
    -- information is taken from the NVT ASCII character
    -- set.  It is suggested that this name contain one or
    -- more of the following: IP address, management station
    -- name, network manager's name, location, or phone
    -- number.
    -- In some cases the agent itself will be the owner of
    -- an entry.  In these cases, this string shall be set
    -- to a string starting with 'monitor'.
    --
    -- SNMP access control is articulated entirely in terms
    -- of the contents of MIB views; access to a particular
    -- SNMP object instance depends only upon its presence
    -- or absence in a particular MIB view and never upon
    -- its value or the value of related object instances.
    -- Thus, objects of this type afford resolution of
    -- resource contention only among cooperating managers;
    -- they realize no access control function with respect
    -- to uncooperative parties.
    --
    -- By convention, objects with this syntax are declared as
    -- having
    --
    --      SIZE (0..127)

    EntryStatus ::= INTEGER
               { valid(1),
                 createRequest(2),
                 underCreation(3),
                 invalid(4)
               }
    -- The status of a table entry.
    --
    -- Setting this object to the value invalid(4) has the
    -- effect of invalidating the corresponding entry.
    -- That is, it effectively disassociates the mapping
    -- identified with said entry.
    -- It is an implementation-specific matter as to whether
    -- the agent removes an invalidated entry from the table.
    -- Accordingly, management stations must be prepared to
    -- receive tabular information from agents that
    -- corresponds to entries currently not in use.  Proper
    -- interpretation of such entries requires examination
    -- of the relevant EntryStatus object.
    --
    -- An existing instance of this object cannot be set to
    -- createRequest(2).  This object may only be set to
    -- createRequest(2) when this instance is created.  When
    -- this object is created, the agent may wish to create
    -- supplemental object instances with default values
    -- to complete a conceptual row in this table.  Because
    -- the creation of these default objects is entirely at
    -- the option of the agent, the manager must not assume
    -- that any will be created, but may make use of any that
    -- are created. Immediately after completing the create
    -- operation, the agent must set this object to
    -- underCreation(3).
    --
    -- When in the underCreation(3) state, an entry is
    -- allowed to exist in a possibly incomplete, possibly
    -- inconsistent state, usually to allow it to be
    -- modified in mutiple PDUs.  When in this state, an
    -- entry is not fully active.  Entries shall exist in
    -- the underCreation(3) state until the management
    -- station is finished configuring the entry and sets
    -- this object to valid(1) or aborts, setting this
    -- object to invalid(4).  If the agent determines that
    -- an entry has been in the underCreation(3) state for
    -- an abnormally long time, it may decide that the
    -- management station has crashed.  If the agent makes
    -- this decision, it may set this object to invalid(4)
    -- to reclaim the entry.  A prudent agent will
    -- understand that the management station may need to
    -- wait for human input and will allow for that
    -- possibility in its determination of this abnormally
    -- long period.
    --
    -- An entry in the valid(1) state is fully configured and
    -- consistent and fully represents the configuration or
    -- operation such a row is intended to represent.  For
    -- example, it could be a statistical function that is
    -- configured and active, or a filter that is available
    -- in the list of filters processed by the packet capture
    -- process.
    --
    -- A manager is restricted to changing the state of an
    -- entry in the following ways:
    --
    --                       create   under
    --      To:       valid  Request  Creation  invalid
    -- From:
    -- valid             OK       NO        OK       OK
    -- createRequest    N/A      N/A       N/A      N/A
    -- underCreation     OK       NO        OK       OK
    -- invalid           NO       NO        NO       OK
    -- nonExistent       NO       OK        NO       OK
    --
    -- In the table above, it is not applicable to move the
    -- state from the createRequest state to any other
    -- state because the manager will never find the
    -- variable in that state.  The nonExistent state is
    -- not a value of the enumeration, rather it means that
    -- the entryStatus variable does not exist at all.
    --
    -- An agent may allow an entryStatus variable to change
    -- state in additional ways, so long as the semantics
    -- of the states are followed.  This allowance is made
    -- to ease the implementation of the agent and is made
    -- despite the fact that managers should never
    -- excercise these additional state transitions.


    statistics        OBJECT IDENTIFIER ::= { rmon 1 }
    history           OBJECT IDENTIFIER ::= { rmon 2 }
    alarm             OBJECT IDENTIFIER ::= { rmon 3 }
    hosts             OBJECT IDENTIFIER ::= { rmon 4 }
    hostTopN          OBJECT IDENTIFIER ::= { rmon 5 }
    matrix            OBJECT IDENTIFIER ::= { rmon 6 }
    filter            OBJECT IDENTIFIER ::= { rmon 7 }
    capture           OBJECT IDENTIFIER ::= { rmon 8 }
    event             OBJECT IDENTIFIER ::= { rmon 9 }


-- The Ethernet Statistics Group
--
-- Implementation of the Ethernet Statistics group is
-- optional.
--
-- The ethernet statistics group contains statistics
-- measured by the probe for each monitored interface on
-- this device.  These statistics take the form of free
-- running counters that start from zero when a valid entry
-- is created.
--
-- This group currently has statistics defined only for
-- Ethernet interfaces.  Each etherStatsEntry contains
-- statistics for one Ethernet interface.  The probe must
-- create one etherStats entry for each monitored Ethernet
-- interface on the device.

etherStatsTable OBJECT-TYPE
    ::= { statistics 1 }

etherStatsEntry OBJECT-TYPE
--  ROW-STATUS-TYPE v1-status-field
    ROW-STATUS-TYPE other-status-field
    STATUS-FIELD-NAME etherStatsStatus
    DELETE-VALUE      invalid
    CREATE-SEQUENCE   createRequest, valid
    UPDATE-SEQUENCE   underCreation, valid
    DELETE-SEQUENCE   invalid
    ::= { etherStatsTable 1 }

-- The History Control Group

-- Implementation of the History Control group is optional.
--
-- The history control group controls the periodic statistical
-- sampling of data from various types of networks.  The
-- historyControlTable stores configuration entries that each
-- define an interface, polling period, and other parameters.
-- Once samples are taken, their data is stored in an entry
-- in a media-specific table.  Each such entry defines one
-- sample, and is associated with the historyControlEntry that
-- caused the sample to be taken.  Each counter in the
-- etherHistoryEntry counts the same event as its
-- similarly-named counterpart in the etherStatsEntry,
-- except that each value here is a cumulative sum during a
-- sampling period.
--
-- If the probe keeps track of the time of day, it should
-- start the first sample of the history at a time such that
-- when the next hour of the day begins, a sample is
-- started at that instant.  This tends to make more
-- user-friendly reports, and enables comparison of reports
-- from different probes that have relatively accurate time
-- of day.
--
-- The probe is encouraged to add two history control entries
-- per monitored interface upon initialization that describe
-- a short term and a long term polling period.  Suggested
-- parameters are 30 seconds for the short term polling period
-- and 30 minutes for the long term period.

historyControlTable OBJECT-TYPE
    ::= { history 1 }

historyControlEntry OBJECT-TYPE
--  ROW-STATUS-TYPE v1-status-field
    ROW-STATUS-TYPE other-status-field
    STATUS-FIELD-NAME historyControlStatus
    DELETE-VALUE      invalid
    CREATE-SEQUENCE   createRequest, valid
    UPDATE-SEQUENCE   underCreation, valid
    DELETE-SEQUENCE   invalid
    ::= { historyControlTable 1 }


-- The Ethernet History Group

-- Implementation of the Ethernet History group is optional.
--
-- The Ethernet History group records periodic
-- statistical samples from a network and stores them
-- for later retrieval.  Once samples are taken, their
-- data is stored in an entry in a media-specific
-- table.  Each such entry defines one sample, and is
-- associated with the historyControlEntry that caused
-- the sample to be taken.  This group defines the
-- etherHistoryTable, for Ethernet networks.
--
etherHistoryTable OBJECT-TYPE
    ::= { history 2 }

etherHistoryEntry OBJECT-TYPE
    ROW-STATUS-TYPE no-status-field
    ::= { etherHistoryTable 1 }



-- The Alarm Group

-- Implementation of the Alarm group is optional.
--
-- The Alarm Group requires the implementation of the Event
-- group.
--
-- The Alarm group periodically takes
-- statistical samples from variables in the probe and
-- compares them to thresholds that have been
-- configured.  The alarm table stores configuration
-- entries that each define a variable, polling period,
-- and threshold parameters.  If a sample is found to
-- cross the threshold values, an event is generated.
-- Only variables that resolve to an ASN.1 primitive
-- type of INTEGER (INTEGER, Counter, Gauge, or
-- TimeTicks) may be monitored in this way.
--
-- This function has a hysteresis mechanism to limit
-- the generation of events.  This mechanism generates
-- one event as a threshold is crossed in the
-- appropriate direction.  No more events are generated
-- for that threshold until the opposite threshold is
-- crossed.
--
-- In the case of a sampling a deltaValue, a probe may
-- implement this mechanism with more precision if it
-- takes a delta sample twice per period, each time
-- comparing the sum of the latest two samples to the
-- threshold.  This allows the detection of threshold
-- crossings that span the sampling boundary.  Note
-- that this does not require any special configuration
-- of the threshold value.  It is suggested that probes
-- implement this more precise algorithm.

alarmTable OBJECT-TYPE
    ::= { alarm 1 }

alarmEntry OBJECT-TYPE
--  ROW-STATUS-TYPE v1-status-field
    ROW-STATUS-TYPE other-status-field
    STATUS-FIELD-NAME alarmStatus
    DELETE-VALUE      invalid
    CREATE-SEQUENCE   createRequest, valid
    UPDATE-SEQUENCE   underCreation, valid
    DELETE-SEQUENCE   invalid
    ::= { alarmTable 1 }

-- The Host Group

-- Implementation of the Host group is optional.
--
-- The host group discovers new hosts on the network by
-- keeping a list of source and destination MAC Addresses seen
-- in good packets.  For each of these addresses, the host
-- group keeps a set of statistics.  The hostControlTable
-- controls which interfaces this function is performed on,
-- and contains some information about the process.  On
-- behalf of each hostControlEntry, data is collected on an
-- interface and placed in both the hostTable and the
-- hostTimeTable.  If the monitoring device finds itself
-- short of resources, it may delete entries as needed.  It
-- is suggested that the device delete the least recently
-- used entries first.

-- The hostTable contains entries for each address
-- discovered on a particular interface.  Each entry
-- contains statistical data about that host.  This table is
-- indexed by the MAC address of the host, through which a
-- random access may be achieved.

-- The hostTimeTable contains data in the same format as the
-- hostTable, and must contain the same set of hosts, but is
-- indexed using hostTimeCreationOrder rather than
-- hostAddress.
-- The hostTimeCreationOrder is an integer which reflects
-- the relative order in which a particular entry was
-- discovered and thus inserted into the table.  As this
-- order, and thus the index, is among those entries
-- currently in the table, the index for a particular entry
-- may change if an (earlier) entry is deleted.  Thus the
-- association between hostTimeCreationOrder and
-- hostTimeEntry may be broken at any time.

-- The hostTimeTable has two important uses.  The first is the
-- fast download of this potentially large table.  Because the
-- index of this table runs from 1 to the size of the table,
-- inclusive, its values are predictable.  This allows very
-- efficient packing of variables into SNMP PDU's and allows
-- a table transfer to have multiple packets outstanding.
-- These benefits increase transfer rates tremendously.

-- The second use of the hostTimeTable is the efficient
-- discovery by the management station of new entries added
-- to the table. After the management station has downloaded
-- the entire table, it knows that new entries will be added
-- immediately after the end of the current table.  It can
-- thus detect new entries there and retrieve them easily.

-- Because the association between hostTimeCreationOrder and
-- hostTimeEntry may be broken at any time, the management
-- station must monitor the related hostControlLastDeleteTime
-- object.  When the management station thus detects a
-- deletion, it must assume that any such associations have
--- been broken, and invalidate any it has stored locally.
-- This includes restarting any download of the
-- hostTimeTable that may have been in progress, as well as
-- rediscovering the end of the hostTimeTable so that it may
-- detect new entries.  If the management station does not
-- detect the broken association, it may continue to refer
-- to a particular host by its creationOrder while
-- unwittingly retrieving the data associated with another
-- host entirely.  If this happens while downloading the
-- host table, the management station may fail to download
-- all of the entries in the table.

hostControlTable OBJECT-TYPE
    ::= { hosts 1 }

hostControlEntry OBJECT-TYPE
--  ROW-STATUS-TYPE v1-status-field
    ROW-STATUS-TYPE other-status-field
    STATUS-FIELD-NAME hostControlStatus
    DELETE-VALUE      invalid
    CREATE-SEQUENCE   createRequest, valid
    UPDATE-SEQUENCE   underCreation, valid
    DELETE-SEQUENCE   invalid
    ::= { hostControlTable 1 }


hostTable OBJECT-TYPE
    ::= { hosts 2 }

hostEntry OBJECT-TYPE
    ROW-STATUS-TYPE no-status-field
    ::= { hostTable 1 }


-- host Time Table

hostTimeTable OBJECT-TYPE
    ::= { hosts 3 }

hostTimeEntry OBJECT-TYPE
    ROW-STATUS-TYPE no-status-field
    ::= { hostTimeTable 1 }



-- The Host Top "N" Group

-- Implementation of the Host Top N group is optional.
--
-- The Host Top N group requires the implementation of the
-- host group.
--
-- The Host Top N group is used to prepare reports that
-- describe the hosts that top a list ordered by one of
-- their statistics.
-- The available statistics are samples of one of their
-- base statistics, over an interval specified by the
-- management station.  Thus, these statistics are rate
-- based.  The management station also selects how many such
-- hosts are reported.

-- The hostTopNControlTable is used to initiate the
-- generation of such a report.  The management station
-- may select the parameters of such a report, such as
-- which interface, which statistic, how many hosts,
-- and the start and stop times of the sampling.  When
-- the report is prepared, entries are created in the
-- hostTopNTable associated with the relevant
-- hostTopNControlEntry.  These entries are static for
-- each report after it has been prepared.

hostTopNControlTable OBJECT-TYPE
    ::= { hostTopN 1 }

hostTopNControlEntry OBJECT-TYPE
    ROW-STATUS-TYPE v1-status-field
    STATUS-FIELD-NAME hostTopNStatus
    DELETE-VALUE      invalid
    ::= { hostTopNControlTable 1 }


hostTopNTable OBJECT-TYPE
    ::= { hostTopN 2 }

hostTopNEntry OBJECT-TYPE
    ROW-STATUS-TYPE no-status-field
    ::= { hostTopNTable 1 }



-- The Matrix Group

-- Implementation of the Matrix group is optional.
--
-- The Matrix group consists of the matrixControlTable,
-- matrixSDTable and the matrixDSTable.  These tables
-- store statistics for a particular conversation
-- between two addresses.  As the device detects a new
-- conversation, including those to a non-unicast
-- address, it creates a new entry in both of the
-- matrix tables.  It must only create new entries
-- based on information received in good packets.  If
-- the monitoring device finds itself short of
-- resources, it may delete entries as needed.  It is
-- suggested that the device delete the least recently
-- used entries first.

matrixControlTable OBJECT-TYPE
    ::= { matrix 1 }

matrixControlEntry OBJECT-TYPE
    ROW-STATUS-TYPE v1-status-field
    STATUS-FIELD-NAME matrixControlStatus
    DELETE-VALUE      invalid
    ::= { matrixControlTable 1 }


matrixSDTable OBJECT-TYPE
    ::= { matrix 2 }

matrixSDEntry OBJECT-TYPE
    ROW-STATUS-TYPE no-status-field
    ::= { matrixSDTable 1 }



-- Traffic matrix tables from destination to source

matrixDSTable OBJECT-TYPE
    ::= { matrix 3 }

matrixDSEntry OBJECT-TYPE
    ROW-STATUS-TYPE no-status-field
    ::= { matrixDSTable 1 }



-- The Filter Group

-- Implementation of the Filter group is optional.
--
-- The Filter group allows packets to be captured with an
-- arbitrary filter expression.  A logical data and
-- event stream or "channel" is formed by the packets
-- that match the filter expression.
--
-- This filter mechanism allows the creation of an arbitrary
-- logical expression with which to filter packets.  Each
-- filter associated with a channel is OR'ed with the others.
-- Within a filter, any bits checked in the data and status
-- are AND'ed with respect to other bits in the same filter.
-- The NotMask also allows for checking for inequality.
-- Finally, the channelAcceptType object allows for
-- inversion of the whole equation.
--
-- If a management station wishes to receive a trap to alert
-- it that new packets have been captured and are available
-- for download, it is recommended that it set up an alarm
-- entry that monitors the value of the relevant
-- channelMatches instance.
--
-- The channel can be turned on or off, and can also
-- generate events when packets pass through it.

filterTable OBJECT-TYPE
    ::= { filter 1 }

filterEntry OBJECT-TYPE
    ROW-STATUS-TYPE v1-status-field
    STATUS-FIELD-NAME filterStatus
    DELETE-VALUE      invalid
    ::= { filterTable 1 }


channelTable OBJECT-TYPE
    ::= { filter 2 }

channelEntry OBJECT-TYPE
    ROW-STATUS-TYPE v1-status-field
    STATUS-FIELD-NAME channelStatus
    DELETE-VALUE      invalid
    ::= { channelTable 1 }


-- The Packet Capture Group

-- Implementation of the Packet Capture group is optional.
--
-- The Packet Capture Group requires implementation of the
-- Filter Group.
--
-- The Packet Capture group allows packets to be captured
-- upon a filter match.  The bufferControlTable controls
-- the captured packets output from a channel that is
-- associated with it.  The captured packets are placed
-- in entries in the captureBufferTable.  These entries are
-- associated with the bufferControlEntry on whose behalf they
-- were stored.

bufferControlTable OBJECT-TYPE
    ::= { capture 1 }

bufferControlEntry OBJECT-TYPE
    ROW-STATUS-TYPE v1-status-field
    STATUS-FIELD-NAME bufferControlStatus
    DELETE-VALUE      invalid
    ::= { bufferControlTable 1 }

captureBufferTable OBJECT-TYPE
    ::= { capture 2 }

captureBufferEntry OBJECT-TYPE
    ROW-STATUS-TYPE no-status-field
    ::= { captureBufferTable 1 }



-- The Event Group

-- Implementation of the Event group is optional.
--
-- The Event group controls the generation and notification
-- of events from this device.  Each entry in the eventTable
-- describes the parameters of the event that can be
-- triggered. Each event entry is fired by an associated
-- condition located elsewhere in the MIB.  An event entry
-- may also be associated- with a function elsewhere in the
-- MIB that will be executed when the event is generated.  For
-- example, a channel may be turned on or off by the firing
-- of an event.
--
-- Each eventEntry may optionally specify that a log entry
-- be created on its behalf whenever the event occurs.
-- Each entry may also specify that notification should
-- occur by way of SNMP trap messages.  In this case, the
-- community for the trap message is given in the associated
-- eventCommunity object.  The enterprise and specific trap
-- fields of the trap are determined by the condition that
-- triggered the event.  Two traps are defined: risingAlarm
-- and fallingAlarm.  If the eventTable is triggered by a
-- condition specified elsewhere, the enterprise and
-- specific trap fields must be specified for traps
-- generated for that condition.

eventTable OBJECT-TYPE
    ::= { event 1 }

eventEntry OBJECT-TYPE
    ROW-STATUS-TYPE other-status-field
    STATUS-FIELD-NAME eventStatus
    DELETE-VALUE      invalid
    CREATE-SEQUENCE   createRequest, valid
    UPDATE-SEQUENCE   underCreation, valid
    DELETE-SEQUENCE   invalid
    ::= { eventTable 1 }


logTable OBJECT-TYPE
    ::= { event 2 }

logEntry OBJECT-TYPE
    ROW-STATUS-TYPE no-status-field
    ::= { logTable 1 }


--  These definitions use the TRAP-TYPE macro as
--  defined in RFC 1215 [10]

--  Remote Network Monitoring Traps

risingAlarm TRAP-TYPE
      ENTERPRISE  rmon
      ERRCODE     RSG_ErrMsg_code_rmonRisingAlarm_E
      SEVERITY    INFO
    ::= 1

fallingAlarm TRAP-TYPE
      ENTERPRISE  rmon
      ERRCODE     RSG_ErrMsg_code_rmonFallingAlarm_E
      SEVERITY    INFO
    ::= 2

END

-- This file was automatically generated by Epilogue Technology's
-- Emissary SNMP MIB Compiler, version 4.0.
-- This file was generated using the -partialm switch.
--
-- YOU MAY MODIFY THIS FILE BUT BEWARE ACCIDENTALLY OVERWRITING IT
-- BY REGENERATING IT WITH THE MIB COMPILER.
--
-- Version:    7.45
-- Date:       11 Dec 2006


RADLAN-QOS-CLI-MIB-A DEFINITIONS ::= BEGIN


IMPORTS
    MODULE-IDENTITY, OBJECT-TYPE,Counter32,
    Counter64,Gauge32, Unsigned32, IpAddress, TimeTicks   FROM SNMPv2-SMI
    InterfaceIndexOrZero, InterfaceIndex        FROM IF-MIB
    TruthValue, RowStatus,RowPointer                      FROM RADLAN-SNMPv2
    TEXTUAL-CONVENTION,DisplayString            FROM SNMPv2-TC
    Percents,rlQosCliMib                        FROM RADLAN-MIB;


ClassOffsetType ::= TEXTUAL-CONVENTION
    STATUS  current
    DESCRIPTION
        "Specifies one of 6 offset types:
         1- Absolute-start of the packet.
         2- Layer 2-start of MAC header.
         3- MPLS-start of MPLS header.
         4- Layer 3-start of layer 3 header.
         5- Layer 4-start of layer 4 header.
         6- Layer 5-after TCP/UDP header.
         7- VLAN.
         8- input device port.
         9- input device port."
    SYNTAX  INTEGER {
         packetStart(1),
         layer2-start(2),
         mpls-start(3),
         layer3-start(4),
         layer4-start(5),
         layer5-start(6),
         vlan(7),
         in-port(8),
         out-port(9)
        }

ClassTupleType ::= TEXTUAL-CONVENTION
    STATUS  current
    DESCRIPTION
        "Specifies one of Tuple types "
    SYNTAX  INTEGER {
         protocol(1),
         ip-src(2),
         ip-dest(3),
         dscp(4),
         ip-precedence(5),
         udp-port-src(6),
         udp-port-dest(7),
         tcp-port-src(8),
         tcp-port-dest(9),
         mac-src(10),
         mac-dest(11),
         vlan(12),
         in-port(13),
         out-port(14),
         general(15),
         vpt(16),
         ether-type(17),
         tcp-flags(18),
         icmp-type(19),
         icmp-code(20),
         igmp-type(21)
        }

AceActionType ::= TEXTUAL-CONVENTION
    STATUS  current
    DESCRIPTION
        "Specifies one of 3 ACE Actions:
         1- Permit- permit to the traffic that define
                by the parameters.
         2- Deny- deny the traffic that define
                by the parameter.
         3- Deny- deny the traffic that define
                by the parameters and disable the port."
    SYNTAX  INTEGER {
         permit(1),
         deny(2),
         deny-DisablePort(3)
         }

AceObjectType ::= TEXTUAL-CONVENTION
    STATUS  current
    DESCRIPTION
        "Specifies one of 8 ACE types:
        1- IP ACE.
        2- IP-TCP ACE.
        3- IP-UDP ACE.
        4- IP-offset ACE.
        5- MAC ACE.
        6- MAC-offset ACE.
        7- IP-ICMP ACE.
        8- IP-IGMP ACE."
    SYNTAX  INTEGER {
        ip(1),
        ip-TCP(2),
        ip-UDP(3),
        ip-Offset(4),
        mac(5),
        mac-Offset(6),
        ip-ICMP(7),
        ip-IGMP(8)
        }


AclObjectType ::= TEXTUAL-CONVENTION
    STATUS  current
    DESCRIPTION
        "Specifies one of 2 ACL types:
         1- MAC ACL.
         2- IP ACL"
    SYNTAX  INTEGER {
         mac(1),
         ip(2)
         }

ClassMapType ::= TEXTUAL-CONVENTION
   STATUS  current
   DESCRIPTION
       "Specifies one of 2 Class-map types:
        1- Match all. logical and between all statements.
        2- Match any. logical or between all statements."
  SYNTAX  INTEGER {
       matchAll(1),
       matchAny(2)
       }

ClassMapAction ::= TEXTUAL-CONVENTION
    STATUS  current
    DESCRIPTION
        "Specifies one of 8 Class-map actios:
         1- no action.
         2- Mark IP-Precedence.
         3- Mark DSCP.
         4- Set Egress queueu
         5- Mark VPT
         6- Choose queue by the VPT.
         7- Choose queue by the DSCP.
         8- Choose queue by the TCP/UDP port."
    SYNTAX  INTEGER {
        none(1),
        setIP-Precedence(2),
        setDSCP(3),
        setQueue(4),
        setCos(5),
        trustCos(6),
        trustDSCP(7),
        trustTCP-UDPport(8),
        trustCosDscp(9)
        }

PolicerType ::= TEXTUAL-CONVENTION
    STATUS  current
    DESCRIPTION
        "Specifies one of 3 Policer types:
         1- Single policer only per one class map.
         2- Aggregate policer can be applied to several
            class maps.
         3- Cascade policer."
    SYNTAX  INTEGER {
        single(1),
        aggregate(2),
        cascade(3)
        }


PolicerAction ::= TEXTUAL-CONVENTION
    STATUS  current
    DESCRIPTION
        "Specifies one of 4 Policer Action:
         1- No Action
         2- Drop out of profile packets.
         3- Remark out of profile packets.
         4- Remark to explicit value out of profile packets
         5- this policer is part of cascade chain"
    SYNTAX  INTEGER {
        none(1),
        drop(2),
        remark(3),
        explicit-remark(4),
        cascadePointer(5)
        }

QosObjectMode ::= TEXTUAL-CONVENTION
    STATUS  current
    DESCRIPTION
        "Specifies one of 3 QoS mode:
         1- disable no QoS on the system
         2- Basic Qos mode only trust mode with ACL are enabled.
         3- Advance mode all Qos option are enabled.
         4- Service Mode all Qos option are enabled only in
            service mode configuration"
    SYNTAX  INTEGER {
        disable(1),
        basic(2),
        advance(3),
        service(4)
}

QosObjectBasicMode ::= TEXTUAL-CONVENTION
    STATUS  current
    DESCRIPTION
        "Specifies one of 6 QoS Basic mode:
         1- none. means that only ACL can be applied.
         2- 802.1p. queue is set by the VPT field.
         3- DSCP. queue is set by the DSCP field
         4- DSCP-Mutation. the DSCP mutate in the ingress and
            then the queue is set by the DSCP
         5- TCP/UDP. the queue is set by the port number "
    SYNTAX  INTEGER {
        none(1),
        vpt(2),
        dscp(3),
        dscp-mutation(4),
        tcp-udp(5)
}


BinaryStatus ::= TEXTUAL-CONVENTION
    STATUS  current
    DESCRIPTION
         "Specifies Disable or enable."
    SYNTAX  INTEGER {
        disable(1),
        enable(2)
}

QueueType ::= TEXTUAL-CONVENTION
    STATUS  current
    DESCRIPTION
         "Queue type Ef or WRR."
    SYNTAX  INTEGER {
        ef(1),
        wrr(2)
}

AclDefaultAction ::= TEXTUAL-CONVENTION
    STATUS  current
    DESCRIPTION
         "Default action when the ACL reach end point."
    SYNTAX  INTEGER {
        deny-all(1),
        forward-all(2)
}


InterfaceType ::= TEXTUAL-CONVENTION
    STATUS  current
    DESCRIPTION
         "Interface type."
    SYNTAX  INTEGER {
        vlan(1),
        port(2)
}

rlQosCliQosMode OBJECT-TYPE
    ::= { rlQosCliMib 1 }


rlQosCliBasicModeCfg OBJECT-TYPE
    ::= { rlQosCliMib 2 }

rlQosMaxNumOfAce OBJECT-TYPE
    ::= { rlQosCliMib 3 }




rlQosOffsetTable OBJECT-TYPE
    ::= { rlQosCliMib 4 }

rlQosOffsetEntry OBJECT-TYPE
        ROW-STATUS-TYPE v2-status-field
    STATUS-FIELD-NAME rlQosOffsetStatus
    ::= { rlQosOffsetTable 1 }



rlQosTupleTable OBJECT-TYPE
    ::= { rlQosCliMib 5 }

rlQosTupleEntry OBJECT-TYPE
       ROW-STATUS-TYPE v2-status-field
    STATUS-FIELD-NAME rlQosTupleStatus
    ::= { rlQosTupleTable 1 }




rlQosAceTable OBJECT-TYPE
    ::= { rlQosCliMib 6 }

rlQosAceEntry OBJECT-TYPE
        ROW-STATUS-TYPE v2-status-field
    STATUS-FIELD-NAME rlQosAceStatus
    ::= { rlQosAceTable 1 }









rlQosAclTable OBJECT-TYPE
    ::= { rlQosCliMib 7 }

rlQosAclEntry OBJECT-TYPE
        ROW-STATUS-TYPE v2-status-field
    STATUS-FIELD-NAME rlQosAclStatus
    ::= { rlQosAclTable 1 }



rlQosAclAceRefTable OBJECT-TYPE
    ::= { rlQosCliMib 8 }

rlQosAclAceRefEntry OBJECT-TYPE
        ROW-STATUS-TYPE v2-status-field
    STATUS-FIELD-NAME rlQosAclAceRefStatus
    ::= { rlQosAclAceRefTable 1 }




rlQosClassMapTable OBJECT-TYPE
    ::= { rlQosCliMib 9 }

rlQosClassMapEntry OBJECT-TYPE
        ROW-STATUS-TYPE v2-status-field
    STATUS-FIELD-NAME rlQosClassMapStatus
    ::= { rlQosClassMapTable 1 }







rlQosPolicerTable OBJECT-TYPE
    ::= { rlQosCliMib 10 }

rlQosPolicerEntry OBJECT-TYPE
        ROW-STATUS-TYPE v2-status-field
    STATUS-FIELD-NAME rlQosPolicerStatus
    ::= { rlQosPolicerTable 1 }








rlQosPolicyMapTable OBJECT-TYPE
    ::= { rlQosCliMib 11 }

rlQosPolicyMapEntry OBJECT-TYPE
        ROW-STATUS-TYPE v2-status-field
    STATUS-FIELD-NAME rlQosPolicyMapStatus
    ::= { rlQosPolicyMapTable 1 }





rlQosPolicyClassRefTable OBJECT-TYPE
    ::= { rlQosCliMib 12 }

rlQosPolicyClassRefEntry OBJECT-TYPE
       ROW-STATUS-TYPE v2-status-field
    STATUS-FIELD-NAME rlQosPolicyClassRefStatus
    ::= { rlQosPolicyClassRefTable 1 }






rlQosIfPolicyTable OBJECT-TYPE
    ::= { rlQosCliMib 13 }

rlQosIfPolicyEntry OBJECT-TYPE
        ROW-STATUS-TYPE v2-status-field
    STATUS-FIELD-NAME rlQosIfPolicyMapStatus
    ::= { rlQosIfPolicyTable 1 }







rlQosIfProfileCfgTable OBJECT-TYPE
    ::= { rlQosCliMib 14 }

rlQosIfProfileCfgEntry OBJECT-TYPE
         ROW-STATUS-TYPE v2-status-field
    STATUS-FIELD-NAME rlQosIfprofileStatus
    ::= { rlQosIfProfileCfgTable 1 }







rlQosDscpMutationTable OBJECT-TYPE
    ::= { rlQosCliMib 15}

rlQosDscpMutationEntry OBJECT-TYPE
    ::= { rlQosDscpMutationTable 1 }







rlQosDscpRemarkTable OBJECT-TYPE
    ::= { rlQosCliMib 16 }

rlQosDscpRemarkEntry OBJECT-TYPE
    ::= { rlQosDscpRemarkTable 1 }






rlQosCosQueueTable OBJECT-TYPE
    ::= { rlQosCliMib 17 }

rlQosCosQueueEntry OBJECT-TYPE
    ::= { rlQosCosQueueTable 1 }








rlQosDscpQueueTable OBJECT-TYPE
    ::= { rlQosCliMib 18 }

rlQosDscpQueueEntry OBJECT-TYPE
    ::= { rlQosDscpQueueTable 1 }







rlQosTcpPortQueueTable OBJECT-TYPE
    ::= { rlQosCliMib 19 }

rlQosTcpPortQueueEntry OBJECT-TYPE
        ROW-STATUS-TYPE v2-status-field
    STATUS-FIELD-NAME rlQosTcpPortQueueStatus
    ::= { rlQosTcpPortQueueTable 1 }




rlQosUdpPortQueueTable OBJECT-TYPE
    ::= { rlQosCliMib 20 }

rlQosUdpPortQueueEntry OBJECT-TYPE
        ROW-STATUS-TYPE v2-status-field
    STATUS-FIELD-NAME rlQosUdpPortQueueStatus
    ::= { rlQosUdpPortQueueTable 1 }




rlQosEfManageTable OBJECT-TYPE
    ::= { rlQosCliMib 21 }

rlQosEfManageEntry OBJECT-TYPE
    ::= { rlQosEfManageTable 1 }





rlQosQueueProfileTable OBJECT-TYPE
    ::= { rlQosCliMib 22 }

rlQosQueueProfileEntry OBJECT-TYPE
         ROW-STATUS-TYPE v2-status-field
    STATUS-FIELD-NAME rlQosQueueProfileStatus
   ::= { rlQosQueueProfileTable 1 }





rlQosQueueShapeProfileTable OBJECT-TYPE
    ::= { rlQosCliMib 23 }

rlQosQueueShapeProfileEntry OBJECT-TYPE
         ROW-STATUS-TYPE v2-status-field
    STATUS-FIELD-NAME rlQosQueueShapeProfileStatus
    ::= { rlQosQueueShapeProfileTable 1 }


rlQosAclCounterTable OBJECT-TYPE
    ::= { rlQosCliMib 24 }

rlQosAclCounterEntry OBJECT-TYPE
         ROW-STATUS-TYPE no-status-field
    ::= { rlQosAclCounterTable 1 }



rlQosFreeIndexesTable OBJECT-TYPE
    ::= { rlQosCliMib 25 }

rlQosFreeIndexesEntry OBJECT-TYPE
         ROW-STATUS-TYPE no-status-field
    ::= { rlQosFreeIndexesTable 1 }



rlQosNamesToIndexesTable OBJECT-TYPE
    ::= { rlQosCliMib 26 }

rlQosNamesToIndexesEntry OBJECT-TYPE
         ROW-STATUS-TYPE no-status-field
    ::= { rlQosNamesToIndexesTable 1 }

rlQosStackControlQueue OBJECT-TYPE
    ::= { rlQosCliMib 27 }

rlQosStackControlCos OBJECT-TYPE
    ::= { rlQosCliMib 28 }


rlQosCosQueueDefaultMapTable OBJECT-TYPE
    ::= { rlQosCliMib 29 }

rlQosCosQueueDefaultMapEntry OBJECT-TYPE
    ::= { rlQosCosQueueDefaultMapTable 1 }


rlQosPredefBlockAclTable OBJECT-TYPE
    ::= { rlQosCliMib 30 }

rlQosPredefBlockAclEntry OBJECT-TYPE
        ROW-STATUS-TYPE v2-status-field
    STATUS-FIELD-NAME rlQosPredefBlockAclStatus
    ::= { rlQosPredefBlockAclTable 1 }


rlQosAceTidxTable OBJECT-TYPE
    ::= { rlQosCliMib 31 }

rlQosAceTidxEntry OBJECT-TYPE
        ROW-STATUS-TYPE v2-status-field
    STATUS-FIELD-NAME rlQosAceTidxStatus
    ::= { rlQosAceTidxTable 1 }

rlQosMibVersion OBJECT-TYPE
    ::= { rlQosCliMib 32 }

rlQosDscpQueueDefaultMapTable OBJECT-TYPE
    ::= { rlQosCliMib 33 }

rlQosDscpQueueDefaultMapEntry OBJECT-TYPE
    ::= { rlQosDscpQueueDefaultMapTable 1 }

rlQosDscpToDpTable OBJECT-TYPE
    ::= { rlQosCliMib 34}

rlQosDscpToDpEntry OBJECT-TYPE
    ::= { rlQosDscpToDpTable 1 }


rlQosStatistics OBJECT IDENTIFIER
::= { rlQosCliMib 35 }

rlQosSinglePolicerStatisticsTable OBJECT-TYPE
    ::= { rlQosStatistics 2 }

rlQosSinglePolicerStatisticsEntry OBJECT-TYPE
        ROW-STATUS-TYPE v2-status-field
        STATUS-FIELD-NAME  rlQosSinglePolicerStatisticsStatus
    ::= { rlQosSinglePolicerStatisticsTable 1 }

rlQosAggregatePolicerStatisticsTable OBJECT-TYPE
    ::= { rlQosStatistics 3 }

rlQosAggregatePolicerStatisticsEntry OBJECT-TYPE
    ROW-STATUS-TYPE v2-status-field
    STATUS-FIELD-NAME  rlQosAggregatePolicerStatisticsStatus
    ::= { rlQosAggregatePolicerStatisticsTable 1 }

rlQosOutQueueStatisticsTable OBJECT-TYPE
    ::= { rlQosStatistics 4 }

rlQosOutQueueStatisticsEntry OBJECT-TYPE
    ROW-STATUS-TYPE v2-status-field
    STATUS-FIELD-NAME  rlQosOutQueueStatisticsStatus
    ::= { rlQosOutQueueStatisticsTable 1 }

rlQosGlobalStatisticsCntrsTable OBJECT-TYPE
    ::= { rlQosStatistics 5 }

rlQosClearCounters OBJECT-TYPE
    ::= { rlQosStatistics 6 }

rlQosGlobalStatisticsCntrsEntry OBJECT-TYPE
    ROW-STATUS-TYPE v2-status-field
    STATUS-FIELD-NAME  rlQosGlobalStatisticsStatus
    ::= { rlQosGlobalStatisticsCntrsTable 1 }

-- Classifier Utilization

    rlQosClassifierUtilization OBJECT IDENTIFIER
      ::= { rlQosCliMib 36 }

    rlQosClassifierUtilizationTable OBJECT-TYPE
      ::= { rlQosClassifierUtilization 1 }

    rlQosClassifierUtilizationEntry OBJECT-TYPE
       ROW-STATUS-TYPE no-status-field
       ::= { rlQosClassifierUtilizationTable 1 }

END

